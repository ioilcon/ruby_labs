# 5, 17, 29, 41, 53

def elements_processing(list, func, accumulator = [], el_pr = Proc.new {true}, ind_pr = Proc.new {true}, ind = 0)
    if ind == list.length() then
        accumulator
    else
        elements_processing(list, func, (el_pr.(list, ind) && ind_pr.(ind))?func.(list, ind, accumulator):accumulator, el_pr, ind_pr, ind + 1)
    end
end

def one_element_processing(list, func, accumulator = [], el_pr = Proc.new {true}, ind_pr = Proc.new {true})
    elements_processing(list, func, accumulator, el_pr, ind_pr).first()
end

def list_min(list)
    one_element_processing(list, lambda { |list, ind, acc| (list[ind] < acc.first())?[list[ind]]:acc}, [list.first()])
end

def list_max(list)
    one_element_processing(list, lambda { |list, ind, acc| (list[ind] > acc.first())?[list[ind]]:acc}, [list.first()])
end

def list_sum(list)
    one_element_processing(list, lambda { |list, ind, acc| [acc.first + list[ind]]}, [0])
end

def list_avg(list)
    list_sum(list) / list.length().to_f()
end

# 5

def local_min?(list, ind)
    one_element_processing(list, Proc.new {[true]}, [false], lambda { |list, ind| (ind == 0 || list[ind] < list[ind - 1]) && (ind == list.length() - 1 || list[ind] < list[ind + 1]) }, lambda { |cur_ind| cur_ind == ind})
end

# 17

def switch_min_max(list)
    elements_processing(list, lambda { |list, ind, acc| case when list[ind] == acc[0] then acc.push(acc[1]) when list[ind] == acc[1] then acc.push(acc[0]) else acc.push(list[ind]) end}, [list_min(list), list_max(list)])[2..]
end

# 29

def max_in_ints?(list, a, b)
    max_in_range?(list, a..b)
end

def max_in_range?(list, interval)
    interval.include?(list_max(list)) 
end

# 41

def abs_list_avg(list)
    list_avg(elements_processing(list, lambda { |list, ind, acc| acc.push(list[ind].abs())}))
end

# 53

def under_avg_elems_excluding_max(list)
    elements_processing(list, lambda { |list, ind, acc| if (list_avg(list)...list_max(list)).include?(list[ind]) then acc.push(list[ind]) else acc end })
end

functions = [
    'puts("введите индекс элемента")
     ind = gets.to_i
     puts("является ли число глобальным минимумом?")
     puts local_min?(list, ind)',
    'puts("обменять местами минимум и максимум:")
     p switch_min_max(list)',
    'puts("введите интервал:")
     int = elements_processing(gets.split(/\.\.| +/), lambda { |list, ind, acc| acc.push(list[ind].to_i)})
     puts("принадлежит ли максимум интервалу?")
     puts max_in_ints?(list, int[0], int[1])',
    'puts("среднее арифметическое модулей элементов равно: " + abs_list_avg(list).to_s)',
    'puts("элементы массива между средним арифметическим и максимумом:")
     p under_avg_elems_excluding_max(list)'
]

begin
    func_choice = Integer(ARGV[0])
    input_choice = ARGV[1]
    input_file_name = ARGV[2]
    ARGV.clear()
    if (func_choice >= 1 && func_choice <= 5) then
        case
        when input_choice == "-k"
            list = []
            puts("введите список:")
            list = elements_processing(gets.split(), lambda { |list, ind, acc| acc.push(list[ind].to_i)})
        when input_choice == "-f" 
            input = File.new(input_file_name + ".txt")
            list = elements_processing(input.readline.split(), lambda { |list, ind, acc| acc.push(list[ind].to_i)})
        else
            puts("мысли я не читаю")
        end

        p list
        eval(functions[func_choice - 1])
    
    else
        puts("hello world")
    end
    rescue
        puts("hello world")
end
